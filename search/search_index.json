{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u7b80\u4ecb\u53ca\u5b89\u88c5","text":"<p><code>Spikify</code> \u662f\u4e00\u4e2a\u65e8\u5728\u5e2e\u52a9\u5f00\u53d1\u8005\u5feb\u901f\u63d0\u5347\u5f00\u53d1\u6548\u7387\u7684 <code>Python</code> \u5de5\u5177\u5305\u3002\u5176\u540d\u79f0\u6765\u6e90\u4e8e\u201cSpike\u201d\uff0c\u610f\u5473\u7740\u5728\u77ed\u65f6\u95f4\u5185\u96c6\u4e2d\u7279\u6027\uff0c\u8fc5\u901f\u89e3\u51b3\u95ee\u9898\u3002<code>Spikify</code> \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u5b9e\u7528\u5de5\u5177\u548c\u51fd\u6570\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u5728\u65e5\u5e38\u5f00\u53d1\u4e2d\u51cf\u5c11\u91cd\u590d\u52b3\u52a8\uff0c\u4e13\u6ce8\u4e8e\u6838\u5fc3\u903b\u8f91\u7684\u5b9e\u73b0\u3002</p>"},{"location":"#_2","title":"\u5b89\u88c5","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7 <code>pip</code> \u6765\u5b89\u88c5 <code>Spikify</code>\uff1a</p> <pre><code>pip install spikify\n</code></pre>"},{"location":"#_3","title":"\u4e3b\u8981\u7279\u6027","text":"<ul> <li>\u5b9e\u7528\u5de5\u5177\u51fd\u6570\uff1a\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u5e38\u7528\u7684\u5de5\u5177\u51fd\u6570\uff0c\u5982\u6570\u636e\u5904\u7406\u3001\u5b57\u7b26\u4e32\u64cd\u4f5c\u3001\u6587\u4ef6\u8bfb\u5199\u7b49\u3002</li> <li>\u6027\u80fd\u4f18\u5316\uff1a\u5185\u7f6e\u4e86\u6027\u80fd\u5206\u6790\u5de5\u5177\u548c\u88c5\u9970\u5668\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u5feb\u901f\u5b9a\u4f4d\u6027\u80fd\u74f6\u9888\u3002</li> <li>\u4ee3\u7801\u7b80\u5316\uff1a\u901a\u8fc7\u63d0\u4f9b\u7b80\u6d01\u7684 <code>API</code>\uff0c\u51cf\u5c11\u6837\u677f\u4ee3\u7801\uff0c\u63d0\u5347\u5f00\u53d1\u6548\u7387\u3002</li> <li>\u6a21\u5757\u5316\u8bbe\u8ba1\uff1a\u6bcf\u4e2a\u529f\u80fd\u6a21\u5757\u90fd\u7ecf\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u6613\u4e8e\u6269\u5c55\u548c\u5b9a\u5236\u3002</li> </ul>"},{"location":"quick_start/","title":"\u5feb\u901f\u4e0a\u624b","text":""},{"location":"feature/manager/thread_manager/","title":"ThreadManager \u7ebf\u7a0b\u7ba1\u7406\u5668","text":""},{"location":"feature/manager/thread_manager/#_1","title":"\u7b80\u4ecb","text":"<p><code>ThreadManager</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u7ba1\u7406\u7ebf\u7a0b\u6c60\u7684\u7c7b\uff0c\u5b83\u57fa\u4e8e Python \u7684 <code>concurrent.futures.ThreadPoolExecutor</code>\u3002\u8be5\u7c7b\u63d0\u4f9b\u4e86\u63d0\u4ea4\u4efb\u52a1\u3001\u5173\u95ed\u7ebf\u7a0b\u6c60\u3001\u68c0\u67e5\u4efb\u52a1\u72b6\u6001\u4ee5\u53ca\u52a8\u6001\u8c03\u6574\u7ebf\u7a0b\u6c60\u5927\u5c0f\u7684\u529f\u80fd\u3002</p>"},{"location":"feature/manager/thread_manager/#_2","title":"\u521d\u59cb\u5316","text":"<pre><code>from thread_manager import ThreadManager\n\n# \u521b\u5efa\u4e00\u4e2a ThreadManager \u5b9e\u4f8b\uff0c\u9ed8\u8ba4\u6700\u5927\u5de5\u4f5c\u7ebf\u7a0b\u6570\u4e3a 2\uff0c\u7ebf\u7a0b\u540d\u79f0\u524d\u7f00\u4e3a \"ThreadManager\"\nthread_manager = ThreadManager(max_workers=2, thread_name_prefix=\"MyThread\")\n</code></pre>"},{"location":"feature/manager/thread_manager/#_3","title":"\u53c2\u6570\u8bf4\u660e","text":"<ul> <li><code>max_workers</code>: \u7ebf\u7a0b\u6c60\u4e2d\u6700\u5927\u5de5\u4f5c\u7ebf\u7a0b\u6570\uff0c\u9ed8\u8ba4\u503c\u4e3a 2\u3002</li> <li><code>thread_name_prefix</code>: \u7ebf\u7a0b\u540d\u79f0\u7684\u524d\u7f00\uff0c\u9ed8\u8ba4\u503c\u4e3a \"ThreadManager\"\u3002</li> </ul>"},{"location":"feature/manager/thread_manager/#_4","title":"\u63d0\u4ea4\u4efb\u52a1","text":"<p>\u4f7f\u7528 <code>submit</code> \u65b9\u6cd5\u53ef\u4ee5\u5c06\u4efb\u52a1\u63d0\u4ea4\u5230\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884c\u3002\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a <code>Future</code> \u5bf9\u8c61\uff0c\u53ef\u4ee5\u901a\u8fc7\u8be5\u5bf9\u8c61\u83b7\u53d6\u4efb\u52a1\u7684\u6267\u884c\u7ed3\u679c\u6216\u72b6\u6001\u3002</p> <pre><code>def my_task(arg1, arg2):\n    print(f\"Task running with args: {arg1}, {arg2}\")\n    return arg1 + arg2\n\nfuture = thread_manager.submit(my_task, 1, 2)\n\n# \u83b7\u53d6\u4efb\u52a1\u7ed3\u679c\nresult = future.result()\nprint(f\"Task result: {result}\")\n</code></pre>"},{"location":"feature/manager/thread_manager/#_5","title":"\u53c2\u6570\u8bf4\u660e","text":"<ul> <li><code>task</code>: \u8981\u6267\u884c\u7684\u4efb\u52a1\uff0c\u5fc5\u987b\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\u3002</li> <li><code>*args</code>: \u4f20\u9012\u7ed9\u4efb\u52a1\u7684\u4f4d\u7f6e\u53c2\u6570\u3002</li> <li><code>**kwargs</code>: \u4f20\u9012\u7ed9\u4efb\u52a1\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002</li> </ul>"},{"location":"feature/manager/thread_manager/#_6","title":"\u5173\u95ed\u7ebf\u7a0b\u6c60","text":"<p>\u4f7f\u7528 <code>shutdown</code> \u65b9\u6cd5\u53ef\u4ee5\u5173\u95ed\u7ebf\u7a0b\u6c60\uff0c\u5e76\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u6216\u53d6\u6d88\u672a\u5b8c\u6210\u7684\u4efb\u52a1\u3002</p> <pre><code>thread_manager.shutdown(wait=True, cancel_futures=False)\n</code></pre>"},{"location":"feature/manager/thread_manager/#_7","title":"\u53c2\u6570\u8bf4\u660e","text":"<ul> <li><code>wait</code>: \u5982\u679c\u4e3a <code>True</code>\uff0c\u5219\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u540e\u518d\u5173\u95ed\u7ebf\u7a0b\u6c60\uff1b\u5982\u679c\u4e3a <code>False</code>\uff0c\u5219\u7acb\u5373\u5173\u95ed\u7ebf\u7a0b\u6c60\u3002</li> <li><code>cancel_futures</code>: \u5982\u679c\u4e3a <code>True</code>\uff0c\u5219\u53d6\u6d88\u6240\u6709\u672a\u5b8c\u6210\u7684\u4efb\u52a1\u3002</li> </ul>"},{"location":"feature/manager/thread_manager/#_8","title":"\u68c0\u67e5\u4efb\u52a1\u72b6\u6001","text":"<p>\u4f7f\u7528 <code>all_done</code> \u65b9\u6cd5\u53ef\u4ee5\u68c0\u67e5\u6240\u6709\u4efb\u52a1\u662f\u5426\u5df2\u5b8c\u6210\u3002</p> <pre><code>if thread_manager.all_done():\n    print(\"All tasks are done.\")\nelse:\n    print(\"Some tasks are still running.\")\n</code></pre>"},{"location":"feature/manager/thread_manager/#_9","title":"\u52a8\u6001\u8c03\u6574\u7ebf\u7a0b\u6c60\u5927\u5c0f","text":"<p>\u4f7f\u7528 <code>set_max_workers</code> \u65b9\u6cd5\u53ef\u4ee5\u52a8\u6001\u8bbe\u7f6e\u7ebf\u7a0b\u6c60\u7684\u6700\u5927\u5de5\u4f5c\u7ebf\u7a0b\u6570\u3002</p> <pre><code>thread_manager.set_max_workers(5)\n</code></pre>"},{"location":"feature/manager/thread_manager/#_10","title":"\u53c2\u6570\u8bf4\u660e","text":"<ul> <li><code>max_workers</code>: \u65b0\u7684\u6700\u5927\u5de5\u4f5c\u7ebf\u7a0b\u6570\u3002\u5fc5\u987b\u5927\u4e8e 0\u3002</li> </ul>"},{"location":"feature/manager/thread_manager/#_11","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li>\u5728 Python 3.9 \u53ca\u4ee5\u4e0a\u7248\u672c\u4e2d\uff0c<code>shutdown</code> \u65b9\u6cd5\u652f\u6301 <code>cancel_futures</code> \u53c2\u6570\uff1b\u5728\u8f83\u4f4e\u7248\u672c\u4e2d\uff0c\u8be5\u53c2\u6570\u4f1a\u88ab\u5ffd\u7565\u3002</li> <li><code>set_max_workers</code> \u65b9\u6cd5\u4f1a\u76f4\u63a5\u4fee\u6539\u7ebf\u7a0b\u6c60\u7684\u6700\u5927\u5de5\u4f5c\u7ebf\u7a0b\u6570\uff0c\u5e76\u6839\u636e\u9700\u8981\u8c03\u6574\u7ebf\u7a0b\u6570\u91cf\u3002</li> </ul>"},{"location":"feature/manager/thread_manager/#_12","title":"\u793a\u4f8b\u4ee3\u7801","text":"<pre><code>from thread_manager import ThreadManager\nimport time\n\ndef task(n):\n    time.sleep(n)\n    return f\"Task {n} completed\"\n\n# \u521b\u5efa ThreadManager \u5b9e\u4f8b\ntm = ThreadManager(max_workers=3)\n\n# \u63d0\u4ea4\u591a\u4e2a\u4efb\u52a1\nfutures = []\nfor i in range(5):\n    futures.append(tm.submit(task, i))\n\n# \u83b7\u53d6\u4efb\u52a1\u7ed3\u679c\nfor future in futures:\n    print(future.result())\n\n# \u5173\u95ed\u7ebf\u7a0b\u6c60\ntm.shutdown(wait=True)\n\n# \u68c0\u67e5\u6240\u6709\u4efb\u52a1\u662f\u5426\u5b8c\u6210\nif tm.all_done():\n    print(\"All tasks are done.\")\n\n# \u52a8\u6001\u8c03\u6574\u7ebf\u7a0b\u6c60\u5927\u5c0f\ntm.set_max_workers(5)\n</code></pre>"},{"location":"feature/util/singleton_util/","title":"SingletonUtil \u5355\u4f8b\u5de5\u5177\u7c7b","text":""},{"location":"feature/util/singleton_util/#_1","title":"\u7b80\u4ecb","text":"<p><code>SingletonUtil</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e24\u79cd\u5355\u4f8b\u6a21\u5f0f\u7684\u5b9e\u73b0\u65b9\u5f0f\uff1a\u7ebf\u7a0b\u5b89\u5168\u7684\u5355\u4f8b\u6a21\u5f0f\u548c\u5f02\u6b65\u5b89\u5168\u7684\u5355\u4f8b\u6a21\u5f0f\u3002\u8fd9\u4e24\u79cd\u6a21\u5f0f\u5206\u522b\u9002\u7528\u4e8e\u591a\u7ebf\u7a0b\u73af\u5883\u548c\u5f02\u6b65\u7f16\u7a0b\u73af\u5883\uff0c\u786e\u4fdd\u7c7b\u7684\u5b9e\u4f8b\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u552f\u4e00\u3002</p>"},{"location":"feature/util/singleton_util/#_2","title":"\u5355\u4f8b\u6a21\u5f0f\u5b9e\u73b0","text":""},{"location":"feature/util/singleton_util/#1-singletontype","title":"1. \u7ebf\u7a0b\u5b89\u5168\u7684\u5355\u4f8b\u6a21\u5f0f (<code>SingletonType</code>)","text":"<p><code>SingletonType</code> \u662f\u4e00\u4e2a\u5143\u7c7b\uff0c\u7528\u4e8e\u521b\u5efa\u7ebf\u7a0b\u5b89\u5168\u7684\u5355\u4f8b\u7c7b\u3002\u5b83\u4f7f\u7528 <code>threading.RLock</code> \u6765\u786e\u4fdd\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\u88ab\u521b\u5efa\u3002</p>"},{"location":"feature/util/singleton_util/#_3","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<p>\u8981\u4f7f\u67d0\u4e2a\u7c7b\u6210\u4e3a\u7ebf\u7a0b\u5b89\u5168\u7684\u5355\u4f8b\u7c7b\uff0c\u53ea\u9700\u5c06 <code>SingletonType</code> \u4f5c\u4e3a\u8be5\u7c7b\u7684\u5143\u7c7b\u5373\u53ef\u3002</p> <pre><code>from spikify.util.singleton_util import SingletonType\n\nclass MySingletonClass(metaclass=SingletonType):\n    def __init__(self, value=None):\n        self.value = value\n\n# \u521b\u5efa\u5b9e\u4f8b\ninstance1 = MySingletonClass(\"first\")\ninstance2 = MySingletonClass(\"second\")\n\nprint(instance1 is instance2)  # \u8f93\u51fa: True\nprint(instance1.value)         # \u8f93\u51fa: first\n</code></pre>"},{"location":"feature/util/singleton_util/#2-asyncsingletontype","title":"2. \u5f02\u6b65\u5b89\u5168\u7684\u5355\u4f8b\u6a21\u5f0f (<code>AsyncSingletonType</code>)","text":"<p><code>AsyncSingletonType</code> \u662f\u4e00\u4e2a\u5143\u7c7b\uff0c\u7528\u4e8e\u521b\u5efa\u5f02\u6b65\u5b89\u5168\u7684\u5355\u4f8b\u7c7b\u3002\u5b83\u4f7f\u7528 <code>asyncio.Lock</code> \u6765\u786e\u4fdd\u5728\u5f02\u6b65\u7f16\u7a0b\u73af\u5883\u4e2d\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\u88ab\u521b\u5efa\u3002</p>"},{"location":"feature/util/singleton_util/#_4","title":"\u6ce8\u610f\u4e8b\u9879","text":"<p>\u5f53\u524d\u4ee3\u7801\u4e2d\u5b58\u5728\u4e00\u4e2a\u9519\u8bef\uff1a<code>AsyncSingletonType</code> \u7684\u5b9e\u73b0\u5b9e\u9645\u4e0a\u4e0e <code>SingletonType</code> \u76f8\u540c\uff0c\u4f7f\u7528\u4e86 <code>RLock</code> \u800c\u4e0d\u662f <code>asyncio.Lock</code>\uff0c\u5e76\u4e14\u6ca1\u6709\u6b63\u786e\u5904\u7406\u5f02\u6b65\u4e0a\u4e0b\u6587\u3002\u4ee5\u4e0b\u662f\u4fee\u6b63\u540e\u7684\u5b9e\u73b0\uff1a</p> <pre><code>from asyncio import Lock\nfrom threading import RLock\n\n\nclass AsyncSingletonType(type):\n    \"\"\"\n    \u5229\u7528\u534f\u7a0b\u9501\u5b9e\u73b0\u7684\u5355\u4f8b\u7c7b\n    \"\"\"\n\n    single_lock = Lock()\n\n    async def __call__(cls, *args, **kwargs):\n        async with AsyncSingletonType.single_lock:\n            if not hasattr(cls, \"_instance\"):\n                cls._instance = super(AsyncSingletonType, cls).__call__(*args, **kwargs)\n\n        return cls._instance\n</code></pre>"},{"location":"feature/util/singleton_util/#_5","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<p>\u8981\u4f7f\u67d0\u4e2a\u7c7b\u6210\u4e3a\u5f02\u6b65\u5b89\u5168\u7684\u5355\u4f8b\u7c7b\uff0c\u53ea\u9700\u5c06 <code>AsyncSingletonType</code> \u4f5c\u4e3a\u8be5\u7c7b\u7684\u5143\u7c7b\u5373\u53ef\u3002</p> <pre><code>from spikify.util.singleton_util import AsyncSingletonType\nimport asyncio\n\nclass MyAsyncSingletonClass(metaclass=AsyncSingletonType):\n    def __init__(self, value=None):\n        self.value = value\n\nasync def create_instance(value):\n    instance = await MyAsyncSingletonClass(value)\n    print(f\"Instance created with value: {value}\")\n    return instance\n\nasync def main():\n    task1 = asyncio.create_task(create_instance(\"first\"))\n    task2 = asyncio.create_task(create_instance(\"second\"))\n\n    instance1 = await task1\n    instance2 = await task2\n\n    print(instance1 is instance2)  # \u8f93\u51fa: True\n    print(instance1.value)         # \u8f93\u51fa: first\n\nasyncio.run(main())\n</code></pre>"},{"location":"feature/util/singleton_util/#_6","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li><code>SingletonType</code> \u9002\u7528\u4e8e\u591a\u7ebf\u7a0b\u73af\u5883\uff0c\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\u3002</li> <li><code>AsyncSingletonType</code> \u9002\u7528\u4e8e\u5f02\u6b65\u7f16\u7a0b\u73af\u5883\uff0c\u786e\u4fdd\u5f02\u6b65\u5b89\u5168\u3002</li> <li>\u5728\u4f7f\u7528 <code>AsyncSingletonType</code> \u65f6\uff0c\u8bf7\u786e\u4fdd\u6b63\u786e\u5904\u7406\u5f02\u6b65\u4e0a\u4e0b\u6587\uff0c\u5e76\u4f7f\u7528 <code>await</code> \u5173\u952e\u5b57\u6765\u8c03\u7528\u6784\u9020\u51fd\u6570\u3002</li> </ul>"},{"location":"feature/util/singleton_util/#_7","title":"\u793a\u4f8b\u4ee3\u7801","text":""},{"location":"feature/util/singleton_util/#_8","title":"\u7ebf\u7a0b\u5b89\u5168\u7684\u5355\u4f8b\u6a21\u5f0f\u793a\u4f8b","text":"<pre><code>from spikify.util.singleton_util import SingletonType\n\nclass MySingletonClass(metaclass=SingletonType):\n    def __init__(self, value=None):\n        self.value = value\n\n# \u521b\u5efa\u5b9e\u4f8b\ninstance1 = MySingletonClass(\"first\")\ninstance2 = MySingletonClass(\"second\")\n\nprint(instance1 is instance2)  # \u8f93\u51fa: True\nprint(instance1.value)         # \u8f93\u51fa: first\n</code></pre>"},{"location":"feature/util/singleton_util/#_9","title":"\u5f02\u6b65\u5b89\u5168\u7684\u5355\u4f8b\u6a21\u5f0f\u793a\u4f8b","text":"<pre><code>from spikify.util.singleton_util import AsyncSingletonType\nimport asyncio\n\nclass MyAsyncSingletonClass(metaclass=AsyncSingletonType):\n    def __init__(self, value=None):\n        self.value = value\n\nasync def create_instance(value):\n    instance = await MyAsyncSingletonClass(value)\n    print(f\"Instance created with value: {value}\")\n    return instance\n\nasync def main():\n    task1 = asyncio.create_task(create_instance(\"first\"))\n    task2 = asyncio.create_task(create_instance(\"second\"))\n\n    instance1 = await task1\n    instance2 = await task2\n\n    print(instance1 is instance2)  # \u8f93\u51fa: True\n    print(instance1.value)         # \u8f93\u51fa: first\n\nasyncio.run(main())\n</code></pre>"},{"location":"feature/util/singleton_util/#_10","title":"\u603b\u7ed3","text":"<p>\u901a\u8fc7 <code>SingletonType</code> \u548c <code>AsyncSingletonType</code>\uff0c\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u591a\u7ebf\u7a0b\u548c\u5f02\u6b65\u7f16\u7a0b\u73af\u5883\u4e2d\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f\uff0c\u786e\u4fdd\u7c7b\u7684\u5b9e\u4f8b\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u552f\u4e00\u3002\u8bf7\u6839\u636e\u60a8\u7684\u5e94\u7528\u573a\u666f\u9009\u62e9\u5408\u9002\u7684\u5355\u4f8b\u6a21\u5f0f\u5b9e\u73b0\u3002</p>"}]}